{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","playlistTitle","trackUriArray","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackUris","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a16516d.chunk.js","sourcesContent":["const clientId = '6739337c502e487bbe7c7d9d9abf8b13';\nconst redirectUri = \"http://playlistr.surge.sh\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken(){\n    if (accessToken){\n      return accessToken;\n    };\n\n    // Looking for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n\n      // Wipes access token and URL parameters\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); \n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term){\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n    {headers: {\n      Authorization: `Bearer ${accessToken}`\n    }}).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks){\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(playlistTitle, trackUriArray) {\n    if (!playlistTitle || !trackUriArray.length){\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}`};\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', { headers: headers }\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n      {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({ name: playlistTitle })\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks\n        `, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({ uris: trackUriArray })\n        })\n      })\n    })\n    }\n\n};\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: ''\n    };\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search(){\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e) {\n    this.setState({ term: e.target.value });\n  }\n\n\n  render(){\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" \n              onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" \n              onClick={this.search}\n               >SEARCH</button>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component{\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  renderAction () {\n    if (this.props.isRemoval) {\n      return <button className='Track-action' \n        onClick={this.removeTrack}  >-</button>\n    } else {\n      return <button className='Track-action' \n        onClick={this.addTrack} >+</button>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album} </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\nexport default Track;","import React from 'react';\nimport Track from '../Track/Track'; \nimport './TrackList.css';\n\nclass TrackList extends React.Component {\n  render() {\n    return(\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track track={track} \n              key={track.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval} />\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default TrackList;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false} />\n      </div>\n    )\n  }\n}\n\nexport default SearchResults;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(e) {\n    this.props.onNameChange(e.target.value);\n  }\n\n  render(){\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n        <TrackList tracks={this.props.playlistTracks} \n                  onRemove={this.props.onRemove}\n                  isRemoval={true} /> \n        <button className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\nexport default Playlist;","import React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'Playlist1',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <h1>Play<span className=\"highlight\">list</span>r</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n              onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Components/App/App.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}